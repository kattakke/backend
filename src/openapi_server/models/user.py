# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, name=None, shelf=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param shelf: The shelf of this User.  # noqa: E501
        :type shelf: str
        """
        self.openapi_types = {
            'user_id': str,
            'name': str,
            'shelf': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'name': 'name',
            'shelf': 'shelf'
        }

        self._user_id = user_id
        self._name = name
        self._shelf = shelf

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def shelf(self):
        """Gets the shelf of this User.


        :return: The shelf of this User.
        :rtype: str
        """
        return self._shelf

    @shelf.setter
    def shelf(self, shelf):
        """Sets the shelf of this User.


        :param shelf: The shelf of this User.
        :type shelf: str
        """

        self._shelf = shelf
