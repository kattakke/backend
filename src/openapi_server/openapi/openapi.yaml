openapi: 3.0.3
info:
  contact:
    email: admin@example.com
  description: (*^^*)
  license:
    name: Kattakke License
    url: http://localhost/licenses
  termsOfService: http://localhost/terms/
  title: Swagger Kattakke - OpenAPI 3.0
  version: 1.0.0
externalDocs:
  description: Find out more about Kattakke
  url: http://localhost/
servers:
- url: http://localhost/api/v0
tags:
- description: Auth
  name: auth
- description: user
  name: user
- description: book
  name: book
- description: search
  name: search
- description: etc
  name: etc
paths:
  /auth/login:
    post:
      description: get authorize token
      operationId: auth_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authLogin_request'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: successful operation
      summary: get authorize token
      tags:
      - auth
      x-openapi-router-controller: openapi_server.controllers.auth_controller
  /auth/logout:
    patch:
      description: delete token
      operationId: auth_logout
      parameters:
      - description: bearer token
        explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      security:
      - bearerAuth: []
      summary: delete token
      tags:
      - auth
      x-openapi-router-controller: openapi_server.controllers.auth_controller
  /auth/me:
    get:
      description: get authrized user info
      operationId: auth_me
      parameters:
      - description: bearer token
        explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      security:
      - bearerAuth: []
      summary: get authrized user info
      tags:
      - auth
      x-openapi-router-controller: openapi_server.controllers.auth_controller
  /books:
    post:
      description: post book info
      operationId: post_book
      parameters:
      - description: bearer token
        explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postBook_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: successful operation
      security:
      - bearerAuth: []
      summary: post book info
      tags:
      - book
      x-openapi-router-controller: openapi_server.controllers.book_controller
  /books/{bookId}:
    delete:
      description: delete book info
      operationId: delete_book_info
      parameters:
      - description: bearer token
        explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - description: ID of book
        explode: false
        in: path
        name: bookId
        required: true
        schema:
          format: UUID
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      security:
      - bearerAuth: []
      summary: delete book info
      tags:
      - book
      x-openapi-router-controller: openapi_server.controllers.book_controller
    get:
      description: get book info
      operationId: get_book_info
      parameters:
      - description: ID of book
        explode: false
        in: path
        name: bookId
        required: true
        schema:
          format: UUID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: successful operation
      summary: get book info
      tags:
      - book
      x-openapi-router-controller: openapi_server.controllers.book_controller
    patch:
      description: patch book info
      operationId: patch_book_info
      parameters:
      - description: bearer token
        explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - description: ID of book
        explode: false
        in: path
        name: bookId
        required: true
        schema:
          format: UUID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postBook_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: successful operation
      security:
      - bearerAuth: []
      summary: patch book info
      tags:
      - book
      x-openapi-router-controller: openapi_server.controllers.book_controller
  /health:
    get:
      description: Always return 200
      operationId: health_check
      responses:
        "200":
          description: successful operation
      summary: Health Check API
      tags:
      - etc
      x-openapi-router-controller: openapi_server.controllers.etc_controller
  /search:
    get:
      description: search book
      operationId: get_search_book
      parameters:
      - description: The title of book
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: The isbn of book
        explode: true
        in: query
        name: isbn
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSearch'
          description: successful operation
      summary: search book
      tags:
      - search
      x-openapi-router-controller: openapi_server.controllers.search_controller
  /users:
    post:
      description: register user
      operationId: user_register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authLogin_request'
      responses:
        "201":
          description: successful operation
      summary: register user
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /users/{userId}:
    delete:
      description: delete user info
      operationId: delete_user_info
      parameters:
      - description: bearer token
        explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: UUID
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      security:
      - bearerAuth: []
      summary: delete user info
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
    get:
      description: get user info
      operationId: get_user_info
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: UUID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      summary: get user info
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
    patch:
      description: patch user info
      operationId: patch_user_info
      parameters:
      - description: bearer token
        explode: false
        in: header
        name: Authorization
        required: true
        schema:
          type: string
        style: simple
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: UUID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authLogin_request'
      responses:
        "200":
          description: successful operation
      security:
      - bearerAuth: []
      summary: patch user info
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /users/{userId}/shelf:
    get:
      description: get user shelf
      operationId: get_user_shelf
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: UUID
          type: string
        style: simple
      - description: The title of book
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: The tag of book
        explode: true
        in: query
        name: tag
        required: false
        schema:
          type: string
        style: form
      - description: The isbn of book
        explode: true
        in: query
        name: isbn
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Book'
                type: array
          description: successful operation
      summary: get user shelf
      tags:
      - user
      x-openapi-router-controller: openapi_server.controllers.user_controller
components:
  parameters:
    bearerToken:
      description: bearer token
      explode: false
      in: header
      name: Authorization
      required: true
      schema:
        type: string
      style: simple
  schemas:
    Book:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        author: author
        imagePath: imagePath
        isbn: isbn
        title: title
        bookId: bookId
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        bookId:
          format: UUID
          title: bookId
          type: string
        isbn:
          nullable: true
          title: isbn
          type: string
        title:
          title: title
          type: string
        author:
          nullable: true
          title: author
          type: string
        createdAt:
          format: date-time
          title: createdAt
          type: string
        updatedAt:
          format: date-time
          title: updatedAt
          type: string
        imagePath:
          title: imagePath
          type: string
      title: Book
      type: object
    BookSearch:
      example:
        author: author
        imagePath: imagePath
        isbn: isbn
        title: title
      properties:
        isbn:
          nullable: true
          title: isbn
          type: string
        title:
          title: title
          type: string
        author:
          nullable: true
          title: author
          type: string
        imagePath:
          title: imagePath
          type: string
      title: BookSearch
      type: object
    User:
      example:
        name: name
        userId: userId
        shelf: shelf
      properties:
        userId:
          format: UUID
          title: userId
          type: string
        name:
          title: name
          type: string
        shelf:
          format: UUID
          title: shelf
          type: string
      title: User
      type: object
    Shelf:
      properties:
        shelfId:
          format: UUID
          type: string
        books:
          items:
            format: UUID
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      type: object
    authLogin_request:
      properties:
        id:
          title: id
          type: string
        password:
          title: password
          type: string
      title: authLogin_request
      type: object
    postBook_request:
      properties:
        isbn:
          title: isbn
          type: string
        title:
          title: title
          type: string
        author:
          title: author
          type: string
        imagePath:
          title: imagePath
          type: string
      title: postBook_request
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: openapi_server.controllers.security_controller_.info_from_bearerAuth
